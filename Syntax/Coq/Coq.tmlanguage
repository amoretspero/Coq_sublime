<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>v</string>
	</array>
	<key>foldingStartMarker</key>
	<string></string>
	<key>foldingStopMarker</key>
	<string></string>
	<key>name</key>
	<string>Coq</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#type-abbreviation</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#type-generic</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#constants</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#structure</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#attributes</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#characters</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#definition</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#method_calls</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#modules</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#anonymous_functions</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#keywords</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>anonymous_functions</key> <!-- This part might not be used. -->
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(fun)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.function-definition.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.coq</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.anonymous</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variables</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>async-workflows</key> <!-- This part might not be used. -->
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(async)(?=\s+\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})</string>
					<key>name</key>
					<string>meta.sequence.definition.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>attributes</key> <!-- This part will be used, but format will be same. -->
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\[\&lt;</string>
					<key>end</key>
					<string>\&gt;\]</string>
					<key>name</key>
					<string>support.function.attribute.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>characters</key> <!-- This part will be used and format is same. -->
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\w)(')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(')</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.coq</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>name</key>
							<string>constant.character.coq</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string-escapes</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>invalid.illegal.escape.coq</string>
								</dict>
							</dict>
							<key>match</key>
							<string>.([^']*)</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>comments</key> <!-- This part will be used, if format is different, change. -->
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.block.empty.coq</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\(\*\*?(\*)\)</string>
					<key>name</key>
					<string>comment.block.coq</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(\*[^\)]</string>
					<key>end</key>
					<string>\*\)</string>
					<key>name</key>
					<string>comment.block.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>//.*$</string>
					<key>name</key>
					<string>comment.line.double-slash.coq</string>
				</dict>
			</array>
		</dict>
		<key>constants</key> <!-- Changed : true -> True, false -> False // Added : S, O, compute -->
		<dict>
			<key>patterns</key>
			<array>
				<!--<dict>
					<key>begin</key>
					<string>\b(true|false)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.language.boolean.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>[^\(\)$]</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.comparison.coq</string>
						</dict>
					</dict>
				</dict>-->
				<dict>
					<key>match</key>
					<string>\b(true|false)</string>
					<key>name</key>
					<string>constant.language.boolean.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(None|Some)\b</string>
					<key>name</key>
					<string>constant.language.unit.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\(\)</string>
					<key>name</key>
					<string>constant.language.option.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b-?[0-9][0-9_]*((\.([0-9][0-9_]*([eE][+-]??[0-9][0-9_]*)?)?)|([eE][+-]??[0-9][0-9_]*))</string>
					<key>name</key>
					<string>constant.numeric.floating-point.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(-?((0(x|X)[0-9a-fA-F][0-9a-fA-F_]*)|(0(o|O)[0-7][0-7_]*)|(0(b|B)[01][01_]*)|([0-9][0-9_]*)))</string>
					<key>name</key>
					<string>constant.numeric.integer.nativeint.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(O|S)\b</string>
					<key>name</key>
					<string>constant.language.predefined.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(compute)\b</string>
					<key>name</key>
					<string>constant.language.evaluate.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(level|associativity)\b</string>
					<key>name</key>
					<string>keyword.other.use.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b([a-zA-Z.\|_][a-zA-Z0-9.|_]*)+(_scope)\b</string>
					<key>name</key>
					<string>keyword.other.use.coq</string>
				</dict>
				<!--<dict>
					<key>match</key>
					<string>:.*?[,.]</string>
					<key>name</key>
					<string>type.coq</string>
				</dict>-->
				<dict>
					<key>match</key>
					<string>[.,]|$</string>
					<key>name</key>
					<string>keyword.comparison.coq</string>
				</dict>
			</array>
		</dict>
		<key>definition</key> <!-- Added : Definition, Lemma, Fixpoint, Inductive, Example, Print, Theorem. // Removed : rec, inline, mutable -->
		<dict>
			<key>patterns</key>
			<array>
				<!--<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.coq</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.coq</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(let!?)\s+([_a-zA-Z][a-zA-Z_]*)\s+(=)</string>
					<key>name</key>
					<string>meta.expression.coq</string>
				</dict>-->
				<!--<dict>
					<key>begin</key>
					<string>(let)\s+(\(\|)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(=)|$</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.coq</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.active-expression.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>constant.other.coq</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>constant.other.coq</string>
								</dict>
							</dict>
							<key>match</key>
							<string>([a-zA-Z0-9_]+?)(\|\))|([a-zA-Z0-9_]+?)(\|)</string>
							<key>name</key>
							<string>meta.active-expression.coq</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variables</string>
						</dict>
					</array>
				</dict>-->
				<dict>
					<key>begin</key>
					<string>\b(Definition|Fixpoint|Inductive|Theorem)\s?(\(?\{?([a-zA-Z.\|_][a-zA-Z0-9.|_]*)\)?\}?\w*)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.coq</string>
						</dict>
						<!--<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.function-recursive.coq</string>
						</dict>-->
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(=|:=|,)|$</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.coq</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.binding.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variables</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(Example|Print|Lemma)\s?([a-zA-Z.\|_][a-zA-Z0-9.|_]*)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.coq</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(:|\.)|$</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.coq</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.binding.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variables</string>
						</dict>
					</array>
				</dict>
				<!--<dict>
					<key>begin</key>
					<string>\b(Qed|Proof|intros|reflexivity|auto|simpl|end)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(.)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.coq</string>
						</dict>
					</dict>
				</dict>-->
				<dict>
					<key>match</key>
					<string>\b(Qed|Proof|intros|reflexivity|auto|simpl|end|specialize|rewrite|Abort)\b</string>
					<key>name</key>
					<string>storage.type.function.coq</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#sequences</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#async-workflows</string>
				</dict>
			</array>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*#\s*(light|if|else|endif|r|I|load|time|help|quit)\b</string>
					<key>end</key>
					<string>(\s|$)</string>
					<key>name</key>
					<string>meta.preprocessor.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\byield!?</string>
					<key>name</key>
					<string>keyword.other.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(try|finally|new|in|as|if|then|else|elif|raise|for|begin|end|match|with|when|type|inherit|null|do|Eval|destruct|forall)\b</string>
					<key>name</key>
					<string>keyword.other.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\+|-|/|%|\*\*|\*</string>
					<key>name</key>
					<string>keyword.arithmetic.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\|&gt;|\|\?&gt;|\-&gt;|\&lt;\-|:&gt;|:|\[|\]|\;|_|&amp;&amp;)</string>
					<key>name</key>
					<string>keyword.operator.name</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\|</string>
					<key>name</key>
					<string>keyword.other.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>=|&gt;=|&lt;=|&lt;&gt;|&lt;|&gt;</string>
					<key>name</key>
					<string>keyword.comparison.coq</string>
				</dict>
				<!--<dict>
					<key>match</<key>
					<string>\b(:)\b</string>
					<key>name</key>
					<string>keyword.comparison.coq</string>
				</dict>-->
			</array>
		</dict>
		<key>method_calls</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(?&lt;!\w)([a-z]\w*)(\.)</string>
					<key>end</key>
					<string>(?=.)</string>
					<key>name</key>
					<string>meta.method-call.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.method-call.coq</string>
								</dict>
							</dict>
							<key>match</key>
							<string>[A-Z]\w*(\.)</string>
							<key>name</key>
							<string>meta.method.coq</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>modules</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(namespace|module)\s+([a-zA-Z][a-zA-Z0-9'_.]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.coq</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.section.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\s|$)</string>
					<key>name</key>
					<string>meta.module.namespace.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.module-reference.coq</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>support.other.module.coq</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(\.)([A-Z][a-zA-Z0-9'_]*)</string>
							<key>name</key>
							<string>support.other.module.coq</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(open)\s+([A-Z][a-zA-Z0-9'_]*)(?=(\.[A-Z][a-zA-Z0-9_]*)*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.coq</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.other.module.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\s|$)</string>
					<key>name</key>
					<string>meta.module.open.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.module-reference.coq</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>support.other.module.coq</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(\.)([A-Z][a-zA-Z0-9'_]*)</string>
							<key>name</key>
							<string>support.other.module.coq</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*(module)\s+([A-Z][a-zA-Z0-9'_]*)\s*(=)\s*([A-Z][a-zA-Z0-9'_]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.module-definition.coq</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.module.coq</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.module-definition.coq</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>support.other.module.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\s|$)</string>
					<key>name</key>
					<string>meta.module.alias.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.module-reference.coq</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>support.other.module.coq</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(\.)([A-Z][a-zA-Z0-9'_]*)</string>
							<key>name</key>
							<string>support.other.module.coq</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(?&lt;!\w)([A-Z][a-zA-Z0-9_]*)(\.)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.other.module.coq</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.module-reference.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.)</string>
					<key>name</key>
					<string>meta.module.reference.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.module-reference.coq</string>
								</dict>
							</dict>
							<key>match</key>
							<string>[A-Z][a-zA-Z0-9_]+(\.)</string>
							<key>name</key>
							<string>support.other.module.coq</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>sequences</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(seq)(?=\s+\{|.)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})</string>
					<key>name</key>
					<string>meta.sequence.definition.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string-escapes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[bnrt\\"']</string>
					<key>name</key>
					<string>constant.character.escape.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\(u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})</string>
					<key>name</key>
					<string>constant.character.escape.unicode-sequence.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.character.string.coq</string>
				</dict>
			</array>
		</dict>
		<key>string-format-specs</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>%[-\+0 #]?[bcsdiuxXoeEfFgGeEMOAat]</string>
					<key>name</key>
					<string>constant.character.format.specification.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(%\+A)</string>
					<key>name</key>
					<string>constant.character.format.specification.coq</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(""")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(""")</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.coq</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.triple.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\$[ \t]*</string>
							<key>name</key>
							<string>punctuation.separator.string.ignore-eol.coq</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\([\\'ntbr]|u[a-fA-F0-9]{4}|u[a-fA-F0-9]{8})</string>
							<key>name</key>
							<string>constant.character.string.escape.coq</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\(?![\\'ntbr]|u[a-fA-F0-9]{4}|u[a-fA-F0-9]{8}).</string>
							<key>name</key>
							<string>invalid.illeagal.character.string.coq</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(@)(")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.coq</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;!")(")(?=[^"])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.coq</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.verbatim.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>("")</string>
							<key>name</key>
							<string>constant.character.escape.coq</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=[^\\])(")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(")</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.coq</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-escapes</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string-format-specs</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\$[ \t]*</string>
							<key>name</key>
							<string>punctuation.separator.string.ignore-eol.coq</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>structure</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>meta.paren-group.coq</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>type-abbreviation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\s*(type)\s+</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.coq</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>=|-&gt;</string>
							<key>name</key>
							<string>keyword.other.coq</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>&lt;</string>
							<key>end</key>
							<string>&gt;</string>
							<key>name</key>
							<string>keyword.other.coq</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\'[a-zA-Z]</string>
									<key>name</key>
									<string>storage.type.generic.coq</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>match</key>
							<string>\'[a-zA-Z]</string>
							<key>name</key>
							<string>storage.type.generic.coq</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>type-generic</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\'[a-zA-Z](?!\')</string>
					<key>name</key>
					<string>storage.type.generic.coq</string>
				</dict>
			</array>
		</dict>
		<key>variables</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-generic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\(\)</string>
					<key>name</key>
					<string>variable.parameter.unit.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=:)\s*[a-zA-Z][\w.']*</string>
					<key>name</key>
					<string>storage.type.name.coq</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[a-zA-Z]\w*</string>
					<key>name</key>
					<string>variable.parameter.coq</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.coq</string>
	<key>uuid</key>
	<string>6017A74A-C6EA-47A0-8DF4-E59C931316FA</string>
</dict>
</plist>